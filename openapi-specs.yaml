openapi: "3.0.1"
info:
  title: "LearnHUB API"
  description: "This is an API for LearnHUB system."
  version: "1.0.0"
  contact:
    email: "learnhubdev@gmail.com"
servers:
  # id is subject to change
  - url: "https://{domain}/{stage}"
    variables:
      id:
        default: "test_domain"
      stage:
        default: "dev"
tags:
  - name: user
    description: "Operations that involve users"
  - name: achievement
    description: "Operations that involve achievements"
  - name: program
    description: "Operations that involve study programs"
  - name: quiz
    description: "Operations that involve quizzes"
  - name: transaction
    description: "Operations that involve transaction"
  - name: auth
    description: "Operations that involve user's authentication"
paths:
  /users/students:
    get:
      tags:
        - user
      summary: List all students basic information.
      description: |
        For retrieving multiple students's profile.
      operationId: listStudents
      responses:
        "200":
          description: "OK: List students."
          content:
            application/json:
              schema:
                required:
                  - students
                properties:
                  students:
                    type: array
                    items:
                      $ref: "#/components/schemas/student"
    post:
      tags:
        - user
      summary: Add student
      description: |
        For creating student.
      operationId: postStudent
      requestBody:
        content:
          application/json:
            schema:
              properties:
                uid:
                  type: string
                  example: "123123213"
                username:
                  type: string
                  example: "Paff"
                email:
                  type: string
                  example: "myemail@gmail.com"
                fullname:
                  type: string
                  example: "Firstname Lastname"
                profile_pic:
                  type: string
                  example: "https://profile-pic.png"
      responses:
        "200":
          description: "OK: Add student."
          content:
            application/json:
              schema:
                type: object
                properties:
                  student_id:
                    type: string
                    example: "12314"

  /users/students/{student_id}:
    get:
      tags:
        - user
      summary: Get specific student's basic information.
      description: |
        For retrieving a student's profile.
      operationId: getStudent
      parameters:
        - $ref: "#/components/parameters/studentID"
      responses:
        "200":
          description: "OK: Get student."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/student"
    patch:
      tags:
        - user
      summary: Edit specific student's basic information.
      description: |
        For editing a student's profile.
      operationId: patchStudent
      parameters:
        - $ref: "#/components/parameters/studentID"
      requestBody:
        description: Student profile edit
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "paff"
                fullname:
                  type: string
                  example: "foo bar"
                profile_pic:
                  type: string
                  example: "https://example-pic.png"
      responses:
        "200":
          $ref: "#/components/responses/OK"
    delete:
      tags:
        - user
      summary: Delete specific student's account.
      description: |
        For removing a student's account.
      operationId: deleteStudent
      parameters:
        - $ref: "#/components/parameters/studentID"
      responses:
        "200":
          $ref: "#/components/responses/OK"
  /users/students/{student_id}/achievements:
    get:
      tags:
        - user
      summary: List student's achievements.
      description: For retrieving specific student's achievements.
      operationId: listStudentAchievements
      parameters:
        - $ref: "#/components/parameters/studentID"
      responses:
        "200":
          description: "OK: List student's achievements."
          content:
            application/json:
              schema:
                required:
                  - achievements
                properties:
                  achievements:
                    type: array
                    items:
                      $ref: "#/components/schemas/studentAchievement"
  /users/students/{student_id}/dashboard:
    get:
      deprecated: true
      tags:
        - user
      summary: Use for student's main dashboard.
      description: For retrieving student's dashboard information.
      operationId: listStudentPrograms
      parameters:
        - $ref: "#/components/parameters/studentID"
      responses:
        "200":
          description: "OK: List student's programs."
          content:
            application/json:
              schema:
                required:
                  - courses
                  - classes
                properties:
                  courses:
                    type: array
                    items:
                      $ref: "#/components/schemas/userCourse"
                  classes:
                    type: array
                    items:
                      $ref: "#/components/schemas/userClass"
  /users/students/{student_id}/classes:
    parameters:
      - $ref: "#/components/parameters/studentID"
    get:
      tags:
        - user
      summary: For retrieving students' class dashboard.
      description: For listing student's classes.
      operationId: listStudentClasses
      responses:
        "200":
          description: "OK: List student's classes."
          content:
            application/json:
              schema:
                required:
                  - classes
                properties:
                  classes:
                    type: array
                    items:
                      $ref: "#/components/schemas/studentClasses"
  /user/students/{student_id}/classes/{class_id}:
    parameters:
      - $ref: "#/components/parameters/studentID"
      - $ref: "#/components/parameters/classID"
    get:
      tags:
        - user
      summary: Get specific student's class.
      description: For retrieving specific student's class.
      operationId: getStudentClass
      responses:
        "200":
          description: "OK: Get student's classes."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/studentClass"
  /user/students/{student_id}/class_assignments:
    parameters:
      - $ref: "#/components/parameters/studentID"
    get:
      tags:
        - user
      summary: Get specific student's class assignment
      description: For retrieving specific student's class assignment
      operationId: getStudentClassAssignments
      responses:
        "200":
          description: "OK: Get student's class assignment."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/studentAssignment"

  /user/students/{student_id}/class_progress/{class_id}:
    parameters:
      - $ref: "#/components/parameters/studentID"
      - $ref: "#/components/parameters/classID"
    get:
      tags:
        - user
      summary: Get specific student's class progress.
      description: For retrieving specific student's class progress.
      operationId: getStudentClassProgress
      responses:
        "200":
          description: "OK: Get student's class progress."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/studentClassProgress"

  /users/students/{student_id}/courses:
    parameters:
      - $ref: "#/components/parameters/studentID"
    get:
      tags:
        - user
      summary: For retrieving student's course dashboard.
      description: |
        For listing student's courses.
      operationId: listStudentCourses
      responses:
        "200":
          description: "OK: List student's courses."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/studentCourses"
  /users/students/{student_id}/courses/{course_id}:
    parameters:
      - $ref: "#/components/parameters/studentID"
      - $ref: "#/components/parameters/courseID"
    get:
      tags:
        - user
      summary: Get student's course.
      description: |
        For retrieveing specific student's course.
      operationId: getStudentCourse
      responses:
        "200":
          description: "OK: Get student's course"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/studentCourse"

  /users/students/{student_id}/course_progress/{course_id}:
    parameters:
      - $ref: "#/components/parameters/studentID"
      - $ref: "#/components/parameters/courseID"
    get:
      tags:
        - user
      summary: Get student's course progress
      description: |
        For retrieving specific student's course progress
      operationId: getStudentCourseProgress
      responses:
        "200":
          description: "OK: Get student's course progress"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/studentCourseProgress"
    patch:
      tags:
        - user
      summary: Patch student's course progress
      description: |
        For editing specific student's course progress
      operationId: patchStudentCourseProgress
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - lesson_id
                - finished
                - lesson_completed
              properties:
                lesson_id:
                  type: string
                  example: "1234"
                chapter_id:
                  type: string
                  example: "1234"
                finished:
                  type: boolean
                  example: true
                lesson_completed:
                  type: number
                  example: 50.2
      responses:
        "200":
          description: "OK: Edit student's course progress"
          content:
            application/json:
              schema:
                type: object
                properties:
                  progress:
                    type: number
                    example: 50.0

  /users/students/{student_id}/wishlist:
    get:
      tags:
        - user
      summary: List student's wishlist items.
      description: |
        For retrieving specific student's wishlist items.
      parameters:
        - $ref: "#/components/parameters/studentID"
      operationId: listStudentWishlist
      responses:
        "200":
          description: "OK: List student's wishlist"
          content:
            application/json:
              schema:
                required:
                  - wishlist
                properties:
                  wishlist:
                    type: array
                    items:
                      $ref: "#/components/schemas/studentWishlistItem"
    post:
      tags:
        - user
      summary: Add a student's wishlist item.
      description: |
        For adding specific student's wishlist item.
      parameters:
        - $ref: "#/components/parameters/studentID"
      operationId: postStudentWishlist
      requestBody:
        description: Class or Course to add to wishlist.
        required: true
        content:
          application/json:
            schema:
              minItems: 2
              maxItems: 2
              required:
                - type
              properties:
                type:
                  type: string
                  example: "class"
                class_id:
                  type: string
                  example: "1234"
                course_id:
                  type: string
                  example: "1234"
      responses:
        "200":
          description: "OK: Add student's wishlist item"
          content:
            application/json:
              schema:
                required:
                  - wishlist-item-id
                properties:
                  wishlist-item-id:
                    type: string
                    example: "1234"
  /users/students/{student_id}/wishlist/{wishlist_item_id}:
    get:
      tags:
        - user
      summary: Get student's specific wishlist item.
      description: |
        For retrieving a student's wishlist item.
      parameters:
        - $ref: "#/components/parameters/studentID"
        - $ref: "#/components/parameters/wishlistItemID"
      operationId: getStudentWishlistItem
      responses:
        "200":
          description: "OK: Get a student's wishlist item"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/studentWishlistItem"
    delete:
      tags:
        - user
      summary: Delete student's specific wishlist item.
      description: |
        For removing student's wishlist item.
      parameters:
        - $ref: "#/components/parameters/studentID"
        - $ref: "#/components/parameters/wishlistItemID"
      operationId: deleteStudentWishlistItem
      responses:
        "200":
          $ref: "#/components/responses/OK"
  /users/students/{student_id}/config:
    get:
      tags:
        - user
      summary: Get student's config.
      description: |
        For retrieving a student's config.
      parameters:
        - $ref: "#/components/parameters/studentID"
      operationId: getStudentConfig
      responses:
        "200":
          description: "OK: Get a student's config"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userConfig"
    patch:
      tags:
        - user
      summary: Patch student's config.
      description: |
        For editing a student's config.
      parameters:
        - $ref: "#/components/parameters/studentID"
      operationId: patchStudentConfig
      requestBody:
        description: student config edit
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userConfig"
      responses:
        "200":
          $ref: "#/components/responses/OK"
  /users/students/{student_id}/payment-methods:
    get:
      tags:
        - user
      summary: List student's payment methods.
      description: |
        For retrieving a student's payment methods.
      parameters:
        - $ref: "#/components/parameters/studentID"
      operationId: listStudentPaymentMethods
      responses:
        "200":
          description: "OK: List student's payment methods"
          content:
            application/json:
              schema:
                properties:
                  payment_methods:
                    type: array
                    items:
                      $ref: "#/components/schemas/userPaymentMethod"
    post:
      tags:
        - user
      summary: Add  a student's payment method.
      description: |
        For adding a student's payment method.
      parameters:
        - $ref: "#/components/parameters/studentID"
      operationId: postStudentPaymentMethod
      requestBody:
        description: User's payment method details
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - type
                - card_number
                - cvc
                - expiration_date
                - holder_fullname
              properties:
                name:
                  type: string
                  example: "my-kbank-debit"
                type:
                  type: string
                  example: "kbank_debit"
                card_number:
                  type: string
                  example: "12121313"
                cvc:
                  type: string
                  example: "232"
                expiration_date:
                  type: string
                  example: "08/25"
                holder_fullname:
                  type: string
                  example: "foo bar"
      responses:
        "200":
          description: "OK: Add student's payment methods"
          content:
            application/json:
              schema:
                properties:
                  payment_method_id:
                    type: string
                    example: "1234"
  /users/students/{student_id}/payment-methods/{payment_method_id}:
    get:
      tags:
        - user
      summary: Get student's payment method.
      description: |
        For retrieving a student's payment method.
      parameters:
        - $ref: "#/components/parameters/studentID"
        - $ref: "#/components/parameters/paymentMethodID"
      operationId: getStudentPaymentMethod
      responses:
        "200":
          description: "OK: Get student's specific payment method"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userPaymentMethod"
    patch:
      tags:
        - user
      summary: Edit student's payment method.
      description: |
        For editing a student's payment method.
      parameters:
        - $ref: "#/components/parameters/studentID"
        - $ref: "#/components/parameters/paymentMethodID"
      operationId: patchStudentPaymentMethod
      requestBody:
        description: User's payment method details to edit
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - type
                - card_number
                - cvc
                - expiration_date
                - holder_fullname
              properties:
                name:
                  type: string
                  example: "my-kbank-debit"
                type:
                  type: string
                  example: "kbank_debit"
                card_number:
                  type: string
                  example: "1231"
                cvc:
                  type: string
                  example: "123"
                expiration_date:
                  type: string
                  example: "08/25"
                holder_fullname:
                  type: string
                  example: "foo bar"
      responses:
        "200":
          $ref: "#/components/responses/OK"
    delete:
      tags:
        - user
      summary: Delete student's payment method.
      description: |
        For deleting a student's payment method.
      parameters:
        - $ref: "#/components/parameters/studentID"
        - $ref: "#/components/parameters/paymentMethodID"
      operationId: deleteStudentPaymentMethod
      responses:
        "200":
          $ref: "#/components/responses/OK"
  /users/students/{student_id}/purchases-history:
    get:
      tags:
        - user
      summary: Get student's purchases-history
      description: |
        For retrieving student's purchases-history
      parameters:
        - $ref: "#/components/parameters/studentID"
      operationId: getStudentPurchasesHistory
      responses:
        "200":
          description: "OK: Get student's purchases history"
          content:
            application/json:
              schema:
                properties:
                  purchases_history:
                    type: array
                    items:
                      $ref: "#/components/schemas/studentPurchasesHistoryItem"
  /users/student/{student_id}/basket:
    get:
      tags:
        - user
      summary: Get student's basket
      description: |
        For retrieving student's basket
      parameters:
        - $ref: "#/components/parameters/studentID"
      operationId: getStudentBasket
      responses:
        "200":
          description: "OK: Get student's basket"
          content:
            application/json:
              schema:
                properties:
                  basket:
                    type: array
                    items:
                      $ref: "#/components/schemas/studentBasketItem"
    post:
      tags:
        - user
      summary: Add student's basket item
      description: |
        For adding a student's basket item
      parameters:
        - $ref: "#/components/parameters/studentID"
      operationId: addStudentBasketItem
      requestBody:
        description: Student's basket item details
        required: true
        content:
          application/json:
            schema:
              required:
                - type
                - program_id
              properties:
                type:
                  type: string
                  example: "class"
                program_id:
                  type: string
                  example: "123"
      responses:
        "200":
          description: "OK: Add student basket item"
          content:
            application/json:
              schema:
                properties:
                  basket_item_id:
                    type: string
                    example: "1234"
  /users/student/{student_id}/basket/{basket_item_id}:
    get:
      tags:
        - user
      summary: Get student's basket item
      description: |
        For retrieving student's basket item
      parameters:
        - $ref: "#/components/parameters/studentID"
        - $ref: "#/components/parameters/basketItemID"
      operationId: getStudentBasketItem
      responses:
        "200":
          description: "OK: Get student's basket item"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/studentBasketItem"
    delete:
      tags:
        - user
      summary: Delete student's basket item
      description: |
        For deleting student's basket item
      parameters:
        - $ref: "#/components/parameters/studentID"
        - $ref: "#/components/parameters/basketItemID"
      operationId: deleteStudentBasketItem
      responses:
        "200":
          $ref: "#/components/responses/OK"
  /users/teachers:
    get:
      tags:
        - user
      summary: List all teachers basic information.
      description: |
        For retrieving multiple teacher's profile.
      operationId: listTeachers
      responses:
        "200":
          description: "OK: List teachers."
          content:
            application/json:
              schema:
                required:
                  - teachers
                properties:
                  teachers:
                    type: array
                    items:
                      $ref: "#/components/schemas/teacher"
    post:
      tags:
        - user
      summary: Add teacher
      description: |
        For creating teacher.
      operationId: postTeacher
      requestBody:
        content:
          application/json:
            schema:
              properties:
                uid:
                  type: string
                  example: "123123213"
                username:
                  type: string
                  example: "Paff"
                email:
                  type: string
                  example: "myemail@gmail.com"
                fullname:
                  type: string
                  example: "Firstname Lastname"
                profile_pic:
                  type: string
                  example: "https://profile-pic.png"
      responses:
        "200":
          description: "OK: Add teacher."
          content:
            application/json:
              schema:
                type: object
                properties:
                  teacher_id:
                    type: string
                    example: "12314"
  /users/teachers/{teacher_id}:
    parameters:
      - $ref: "#/components/parameters/teacherID"
    get:
      tags:
        - user
      summary: Get specific teacher basic information.
      description: |
        For retrieving specific teacher's profile.
      operationId: getTeacher
      responses:
        "200":
          description: "OK: List teachers."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/teacher"
    patch:
      tags:
        - user
      summary: Edit teacher
      description: |
        For editing teacher.
      operationId: patchTeacher
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  example: "Paff"
                fullname:
                  type: string
                  example: "Firstname Lastname"
                profile_pic:
                  type: string
                  example: "https://profile-pic.png"
      responses:
        "200":
          description: "OK: Edit teacher."
          content:
            application/json:
              schema:
                $ref: "#/components/responses/OK"
    delete:
      tags:
        - user
      summary: Delete teacher
      description: |
        For removing teacher.
      operationId: deleteTeacher
      responses:
        "200":
          description: "OK: Delete teacher."
          content:
            application/json:
              schema:
                $ref: "#/components/responses/OK"

  /users/teachers/{teacher_id}/dashboard:
    get:
      deprecated: true
      tags:
        - user
      summary: Teacher's main dashboard.
      description: For retrieving specific teacher's programs.
      operationId: listTeacherPrograms
      parameters:
        - $ref: "#/components/parameters/teacherID"
      responses:
        "200":
          description: "OK: List teacher's programs."
          content:
            application/json:
              schema:
                required:
                  - courses
                  - classes
                properties:
                  courses:
                    type: array
                    items:
                      $ref: "#/components/schemas/userCourse"
                  classes:
                    type: array
                    items:
                      $ref: "#/components/schemas/userClass"
  /users/teachers/{teacher_id}/classes:
    get:
      tags:
        - user
      summary: Teacher's class dashboard.
      description: For retrieving specific teacher's classes.
      operationId: listTeacherClasses
      parameters:
        - $ref: "#/components/parameters/teacherID"
      responses:
        "200":
          description: "OK: List teacher's classes."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/teacherClasses"
  /users/teachers/{teacher_id}/courses:
    get:
      tags:
        - user
      summary: Teacher's course dashboard.
      description: |
        For retrieving specific teacher's courses.
      operationId: listTeacherCourses
      parameters:
        - $ref: "#/components/parameters/teacherID"
      responses:
        "200":
          description: "OK: List teacher's courses."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/teacherCourses"
  /users/teachers/{teacher_id}/config:
    get:
      tags:
        - user
      summary: Get teacher's config.
      description: |
        For retrieving a teacher's config.
      parameters:
        - $ref: "#/components/parameters/teacherID"
      operationId: getTeacherConfig
      responses:
        "200":
          description: "OK: Get a teacher's config"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userConfig"
    patch:
      tags:
        - user
      summary: Patch teacher's config.
      description: |
        For editing a teacher's config.
      parameters:
        - $ref: "#/components/parameters/teacherID"
      operationId: patchTeacherConfig
      requestBody:
        description: teacher config edit
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userConfig"
      responses:
        "200":
          $ref: "#/components/responses/OK"
  /users/teachers/{teacher_id}/payment-methods:
    get:
      tags:
        - user
      summary: List teacher's payment methods.
      description: |
        For retrieving a teacher's payment methods.
      parameters:
        - $ref: "#/components/parameters/teacherID"
      operationId: listTeacherPaymentMethods
      responses:
        "200":
          description: "OK: List teacher's payment methods"
          content:
            application/json:
              schema:
                properties:
                  payment_methods:
                    type: array
                    items:
                      $ref: "#/components/schemas/userPaymentMethod"
    post:
      tags:
        - user
      summary: Add  a teacher's payment method.
      description: |
        For adding a teacher's payment method.
      parameters:
        - $ref: "#/components/parameters/teacherID"
      operationId: postTeacherPaymentMethod
      requestBody:
        description: User's payment method details
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - type
                - card_number
                - cvc
                - expiration_date
                - holder_fullname
              properties:
                name:
                  type: string
                  example: "my-kbank-debit"
                type:
                  type: string
                  example: "kbank_debit"
                card_number:
                  type: string
                  example: "1233"
                cvc:
                  type: string
                  example: "123"
                expiration_date:
                  type: string
                  example: "08/25"
                holder_fullname:
                  type: string
                  example: "foo bar"
      responses:
        "200":
          description: "OK: Add teacher's payment methods"
          content:
            application/json:
              schema:
                properties:
                  payment_method_id:
                    type: string
                    example: "1234"
  /users/teachers/{teacher_id}/payment-methods/{payment_method_id}:
    parameters:
      - $ref: "#/components/parameters/teacherID"
      - $ref: "#/components/parameters/paymentMethodID"
    get:
      tags:
        - user
      summary: Get teacher's payment method.
      description: |
        For retrieving a teacher's payment method.
      operationId: getTeacherPaymentMethod
      responses:
        "200":
          description: "OK: Get teacher's specific payment method"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userPaymentMethod"
    patch:
      tags:
        - user
      summary: Edit teacher's payment method.
      description: |
        For editing a teacher's payment method.
      operationId: patchTeacherPaymentMethod
      requestBody:
        description: User's payment method details to edit
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - type
                - card_number
                - cvc
                - expiration_date
                - holder_fullname
              properties:
                name:
                  type: string
                  example: "my-kbank-debit"
                type:
                  type: string
                  example: "kbank_debit"
                card_number:
                  type: string
                  example: "1231"
                cvc:
                  type: string
                  example: "12313"
                expiration_date:
                  type: string
                  example: "08/25"
                holder_fullname:
                  type: string
                  example: "foo bar"
      responses:
        "200":
          $ref: "#/components/responses/OK"
    delete:
      tags:
        - user
      summary: Delete teacher's payment method.
      description: |
        For deleting a teacher's payment method.
      operationId: deleteTeacherPaymentMethod
      responses:
        "200":
          $ref: "#/components/responses/OK"

  # PROGRAMS
  /programs:
    get:
      tags:
        - program
      summary: List programs.
      description: |
        For listing's programs.
      operationId: listPrograms
      responses:
        "200":
          description: "OK: List all programs"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/programs"

  /program/tags:
    get:
      tags:
        - program
      summary: For listing program's tags
      operationId: listProgramTags
      responses:
        "200":
          description: "OK: List all tags"
          content:
            application/json:
              schema:
                type: object
                properties:
                  tags:
                    type: array
                    items:
                      $ref: "#/components/schemas/tag"
    post:
      tags:
        - program
      summary: For adding program's tag
      operationId: postProgramTag
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tag_name:
                  type: string
                  example: "python"
      responses:
        "200":
          description: "OK: Post tag"
          content:
            application/json:
              schema:
                type: object
                properties:
                  tag_id:
                    type: string
                    example: "1234"

  # CLASS
  /programs/classes:
    get:
      tags:
        - program
      summary: List classes.
      description: |
        For listing's classes.
      operationId: listClasses
      responses:
        "200":
          description: "OK: List all classes"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/classes"
    post:
      tags:
        - program
      summary: Add class.
      description: |
        For creating class.
      operationId: postClass
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "basic class"
                class_pic:
                  type: string
                  example: "https://example-pic.com"
                teacher_id:
                  type: string
                  example: "123123"
                description:
                  type: string
                  example: "This class teach .."
                max_student:
                  type: integer
                  example: 30
                price:
                  type: number
                  example: 3.5
                class_objective:
                  type: array
                  items:
                    type: string
                    example: "Objective a"
                class_requirement:
                  type: string
                  example: "Required adobe photoshop"
                difficulty_level:
                  type: string
                  example: "very hard"
                tag_ids:
                  type: array
                  items:
                    type: string
                    description: "list of tags id"
                    example: "1234"
                schedules:
                  type: array
                  items:
                    type: object
                    properties:
                      start:
                        type: integer
                        example: "12312112323"
                      end:
                        type: integer
                        example: "1231232131"
                open_date:
                  type: integer
                  example: "1231233"
                registration_ended_date:
                  type: integer
                  example: "1231233"
                class_ended_date:
                  type: integer
                  example: "1231233"
      responses:
        "200":
          description: "OK: Post class"
          content:
            application/json:
              schema:
                type: object
                properties:
                  class_id:
                    type: string
                    example: "1234"

  /programs/classes/{class_id}:
    parameters:
      - $ref: "#/components/parameters/classID"
    get:
      tags:
        - program
      summary: Get specific class.
      description: |
        For retrieving specific class
      operationId: getClass
      responses:
        "200":
          description: "OK: Get specific class"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/class"
    patch:
      tags:
        - program
      summary: Edit class.
      description: |
        For editing class.
      operationId: patchClass
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "basic class"
                class_pic:
                  type: string
                  example: "https://example-pic.com"
                max_student:
                  type: integer
                  example: 30
                price:
                  type: number
                  example: 3.5
                description:
                  type: string
                  example: "This class teach .."
                class_objective:
                  type: array
                  items:
                    type: object
                    properties:
                      op:
                        type: string
                        example: "add | remove"
                      value:
                        type: string
                        example: "bad objective"

                class_requirement:
                  type: string
                  example: "Required adobe photoshop"
                difficulty_level:
                  type: string
                  example: "very hard"
                tag:
                  type: object
                  properties:
                    op:
                      type: string
                      example: "add | remove"
                    tag_id:
                      type: string
                      example: "1234"
                schedules:
                  type: object
                  properties:
                    op:
                      type: string
                      example: "add | remove"
                    start:
                      type: integer
                      example: "12312112323"
                    end:
                      type: integer
                      example: "12312112323"
                open_date:
                  type: integer
                  example: "1231233"
                registration_ended_date:
                  type: integer
                  example: "1231233"
                class_ended_date:
                  type: integer
                  example: "1231233"
      responses:
        "200":
          $ref: "#/components/responses/OK"

  /programs/classes/{class_id}/threads:
    parameters:
      - $ref: "#/components/parameters/classID"
    get:
      tags:
        - program
      summary: List class threads.
      description: |
        For listing class threads
      operationId: listClassThreads
      responses:
        "200":
          description: "OK: List class's threads"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/threads"
    post:
      tags:
        - program
      summary: Post class thread.
      description: |
        For creating class thread
      operationId: postClassThreads
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Thread foo"
                teacher_id:
                  type: string
                  example: "12312"
                text:
                  type: string
                  example: "text"
                attachments:
                  type: array
                  items:
                    type: object
                    properties:
                      attachment_type:
                        type: string
                        example: "image | video | file | doc"
                      src:
                        type: string
                        example: "content"
      responses:
        "200":
          description: "OK: Get post class's thread"
          content:
            application/json:
              schema:
                type: object
                properties:
                  thread_id:
                    type: string
                    example: "1233"
  /programs/classes/{class_id}/threads/{thread_id}:
    parameters:
      - $ref: "#/components/parameters/classID"
      - $ref: "#/components/parameters/threadID"
    get:
      tags:
        - program
      summary: Get specific class thread.
      description: |
        For retrieving specific class's thread
      operationId: getClassThread
      responses:
        "200":
          description: "OK: Get class's thread"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/thread"
    patch:
      tags:
        - program
      summary: Patch class thread.
      description: |
        For patching class thread
      operationId: patchClassThread
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "name"
                text:
                  type: string
                  example: "text"
                attachments:
                  type: array
                  items:
                    type: object
                    properties:
                      op:
                        type: string
                        example: "add | remove"
                      src:
                        type: string
                        example: "content"
      responses:
        "200":
          description: "OK: Get patch class's thread"
          content:
            application/json:
              schema:
                $ref: "#/components/responses/OK"

  /programs/classes/{class_id}/assignments:
    parameters:
      - $ref: "#/components/parameters/classID"
    get:
      tags:
        - program
      summary: List class's assignments.
      description: |
        For listing class's assignments
      operationId: listClassAssignments
      responses:
        "200":
          description: "OK: Get class's assignments"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/assignments"
    post:
      tags:
        - program
      summary: Post class's assignments.
      description: |
        For creating class's assignments
      operationId: postClassAssignments
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Assignment's name"
                group_name:
                  type: string
                  example: "If group_name already existed assign assignment to that group \nelse create new group"
                due_date:
                  type: integer
                  example: 1233
                text:
                  type: string
                  example: "You must do this homework!!"
                max_score:
                  type: number
                  example: 100
                attachments:
                  type: array
                  items:
                    type: object
                    properties:
                      attachment_type:
                        type: string
                        example: "image | video | doc | file"
                      src:
                        type: string
                        example: "https://example-img.png"
      responses:
        "200":
          description: "OK: Add class's assignment"
          content:
            application/json:
              schema:
                required:
                  - assignment_id
                properties:
                  assignment_id:
                    type: string
                    example: "1234"
  /programs/classes/{class_id}/assignments/{assignment_id}:
    parameters:
      - $ref: "#/components/parameters/classID"
      - $ref: "#/components/parameters/assignmentID"
    get:
      tags:
        - program
      summary: Get specific class assignment.
      description: |
        For retrieving specific class's assignment
      operationId: getClassAssignment
      responses:
        "200":
          description: "OK: Get class's assignment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/assignment"
    patch:
      tags:
        - program
      summary: Patch specific class assignment.
      description: |
        For editing specific class's assignment
      operationId: patchClassAssignment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Assignment name"
                group_name:
                  type: string
                  example: "group_name"
                due_date:
                  type: integer
                  example: 123131
                status:
                  type: string
                  example: "open | closed"
                text:
                  type: string
                  example: "You want to do this homework?"
                attachments:
                  type: array
                  items:
                    type: object
                    properties:
                      op:
                        type: string
                        example: "add | remove"
                      attachment_type:
                        type: string
                        example: "image | video | doc | file"
                      src:
                        type: string
                        example: "https://example-img-old.png"
      responses:
        "200":
          $ref: "#/components/responses/OK"
    delete:
      tags:
        - program
      summary: Delete specific class's assignment.
      description: |
        For removing a class's assignment.
      operationId: deleteClassAssignment
      responses:
        "200":
          $ref: "#/components/responses/OK"

  /programs/classes/{class_id}/assignments/{assignment_id}/submissions:
    parameters:
      - $ref: "#/components/parameters/classID"
      - $ref: "#/components/parameters/assignmentID"
    get:
      tags:
        - program
      summary: Get assignment's submissions.
      description: |
        For retrieving specific assignment's submissions
      operationId: listClassAssignmentSubmissions
      responses:
        "200":
          description: "OK: List submissions"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/submissions"

  /programs/classes/{class_id}/assignments/{assignment_id}/submissions/{student_id}:
    parameters:
      - $ref: "#/components/parameters/classID"
      - $ref: "#/components/parameters/assignmentID"
      - $ref: "#/components/parameters/studentID"
    get:
      tags:
        - program
      summary: Get specific assignment's submission.
      description: |
        For retrieving specific assignment's submission
      operationId: getClassAssignmentSubmission
      responses:
        "200":
          description: "OK: Get submissions"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/submission"
  /programs/classes/{class_id}/assignments/{assignment_id}/submissions/{student_id}/score:
    parameters:
      - $ref: "#/components/parameters/classID"
      - $ref: "#/components/parameters/assignmentID"
      - $ref: "#/components/parameters/studentID"
    patch:
      tags:
        - program
      summary: Patch student's submission score.
      description: |
        For specific assignment's submission score
      operationId: patchClassAssignmentSubmissionScore
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                score:
                  type: number
                  example: 100
      responses:
        "200":
          description: "OK: Patch submissions"
          content:
            application/json:
              schema:
                $ref: "#/components/responses/OK"
  /programs/classes/{class_id}/assignments/{assignment_id}/submissions/{student_id}/submit:
    parameters:
      - $ref: "#/components/parameters/classID"
      - $ref: "#/components/parameters/assignmentID"
      - $ref: "#/components/parameters/studentID"
    put:
      tags:
        - program
      summary: Submit assignments.
      description: |
        For submitting specific class's assignment
      operationId: postClassAssignmentSubmit
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                attachments:
                  type: array
                  items:
                    type: object
                    properties:
                      attachment_type:
                        type: string
                        example: "image"
                      src:
                        type: string
                        example: "https://example-img.png"
      responses:
        "200":
          description: "OK: put assignment submission"
          content:
            application/json:
              schema:
                type: object
                properties:
                  student_id:
                    type: string
                    example: "1234"
  /programs/classes/{class_id}/assignments/{assignment_id}/submissions/{student_id}/unsubmit:
    parameters:
      - $ref: "#/components/parameters/classID"
      - $ref: "#/components/parameters/assignmentID"
      - $ref: "#/components/parameters/studentID"
    patch:
      tags:
        - program
      summary: Unsubmit assignments.
      description: |
        For unsubmitting specific class's assignment
      operationId: patchClassAssignmentUnsubmit
      responses:
        "200":
          description: "OK: patch assignment unsubmit"
          content:
            application/json:
              schema:
                $ref: "#/components/responses/OK"
  /programs/classes/{class_id}/assignments/groups:
    parameters:
      - $ref: "#/components/parameters/classID"
    get:
      tags:
        - program
      summary: List specific class assignment's groups.
      description: |
        For listing specific class's assignment groups
      operationId: listClassAssignmentGroups
      responses:
        "200":
          description: "OK: List class's assignment group"
          content:
            application/json:
              schema:
                type: object
                properties:
                  assignment_groups:
                    type: array
                    items:
                      type: string
                      example: "Hard assignment group"

  # COURSE
  /programs/courses:
    get:
      tags:
        - program
      summary: List courses.
      description: |
        For listing's courses.
      operationId: listCourses
      responses:
        "200":
          description: "OK: List all courses"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/courses"
    post:
      tags:
        - program
      summary: Post courses.
      description: |
        For adding's course.
      operationId: postCourse
      requestBody:
        description: Course to add.
        required: true
        content:
          application/json:
            schema:
              properties:
                teacher_id:
                  type: string
                  example: "1234"
                name:
                  type: string
                  example: "basic redstone course"
                course_pic:
                  type: string
                  example: "https://example-pic.com"
                description:
                  type: string
                  example: "Redstone course"
                course_objective:
                  type: array
                  items:
                    type: string
                    example: "Objective a"
                tag_ids:
                  type: array
                  description: Array of tag_id
                  items:
                    type: string
                    example: "1234"
                course_requirement:
                  type: string
                  example: "Required adobe photoshop"
                difficulty_level:
                  type: string
                  example: "very hard"
                price:
                  type: number
                  example: 100
      responses:
        "200":
          description: "OK: Add course"
          content:
            application/json:
              schema:
                required:
                  - course_id
                properties:
                  course_id:
                    type: string
                    example: "1234"
  /programs/courses/{course_id}:
    parameters:
      - $ref: "#/components/parameters/courseID"
    get:
      tags:
        - program
      summary: Get course.
      description: |
        For retrieving course.
      operationId: getCourse
      responses:
        "200":
          description: "OK: Get course"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/course"
    patch:
      tags:
        - program
      summary: Edit course.
      description: |
        For editing course.
      operationId: patchCourse
      requestBody:
        description: Course details to edit.
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  example: "basic redstone course"
                course_pic:
                  type: string
                  example: "https://example-pic.com"
                description:
                  type: string
                  example: "Redstone course"
                tag:
                  type: object
                  properties:
                    op:
                      type: string
                      example: "add | remove"
                    tag_id:
                      type: string
                      example: "1234"
                course_objective:
                  type: array
                  items:
                    type: object
                    properties:
                      op:
                        type: string
                        example: "add | remove"
                      value:
                        type: string
                        example: "Master CPP"

                course_requirement:
                  type: string
                  example: "Required adobe photoshop"
                difficulty_level:
                  type: string
                  example: "very hard"
                price:
                  type: number
                  example: 100
      responses:
        "200":
          description: "OK: Edit course"
          content:
            application/json:
              schema:
                $ref: "#/components/responses/OK"
    delete:
      tags:
        - program
      summary: Delete specific course.
      description: |
        For removing a course.
      operationId: deleteCourse
      parameters:
        - $ref: "#/components/parameters/courseID"
      responses:
        "200":
          $ref: "#/components/responses/OK"
  /programs/courses/{course_id}/students:
    parameters:
      - $ref: "#/components/parameters/courseID"
    get:
      tags:
        - program
      summary: List course's students.
      description: |
        For listing course's students.
      operationId: listCourseStudents
      responses:
        "200":
          description: "OK: List course's students"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/course_students"
  /programs/courses/{course_id}/chapters:
    parameters:
      - $ref: "#/components/parameters/courseID"
    get:
      tags:
        - program
      summary: List course's chapters.
      description: |
        For listing course's chapters.
      operationId: listCourseChapters
      responses:
        "200":
          description: "OK: List course's chapters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/chapters"
    post:
      tags:
        - program
      summary: Add course's chapter.
      description: |
        For adding a course's chapter.
      operationId: postCourseChapter
      requestBody:
        description: Chapter to add to course.
        required: true
        content:
          application/json:
            schema:
              required:
                - type
              properties:
                name:
                  type: string
                  example: "first chapter"
                description:
                  type: string
                  example: "good chapter"
      responses:
        "200":
          description: "OK: Add course's chapter"
          content:
            application/json:
              schema:
                required:
                  - chapter_id
                properties:
                  chapter_id:
                    type: string
                    example: "1234"
  /programs/courses/{course_id}/chapters/{chapter_id}:
    parameters:
      - $ref: "#/components/parameters/courseID"
      - $ref: "#/components/parameters/chapterID"
    get:
      tags:
        - program
      summary: Get a course's chapter.
      description: |
        For retrieving a course's chapter.
      operationId: getCourseChapter
      responses:
        "200":
          description: "OK: Get a course's chapter"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/chapter"
    patch:
      tags:
        - program
      summary: Edit course's chapter.
      description: |
        For editing a course's chapter.
      operationId: patchCourseChapter
      requestBody:
        description: Chapter to edit.
        required: true
        content:
          application/json:
            schema:
              required:
                - type
              properties:
                name:
                  type: string
                  example: "first chapter"
                description:
                  type: string
                  example: "good chapter"
      responses:
        "200":
          $ref: "#/components/responses/OK"
    delete:
      tags:
        - program
      summary: Delete specific course's chapter.
      description: |
        For removing a course's chapter.
      operationId: deleteChapter
      responses:
        "200":
          $ref: "#/components/responses/OK"
  /programs/courses/{course_id}/chapters/{chapter_id}/lessons:
    parameters:
      - $ref: "#/components/parameters/courseID"
      - $ref: "#/components/parameters/chapterID"
    get:
      tags:
        - program
      summary: List course's lessons.
      description: |
        For listing a course's lessons.
      operationId: listCourseLessons
      responses:
        "200":
          description: "OK: List course's lessons"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/lessons"
    post:
      tags:
        - program
      summary: Add course's lesson.
      description: |
        For adding a course's lesson.
      operationId: postCourseLesson
      requestBody:
        description: |
          Lesson to add to course.
        required: true
        content:
          application/json:
            schema:
              required:
                - type
              properties:
                name:
                  type: string
                  example: "first lesson"
                src:
                  type: string
                  example: "https://example-video.mp4"
                lesson_type:
                  type: string
                  example: "video | file | doc | quiz"
                lesson_length:
                  type: integer
                  example: 10000
      responses:
        "200":
          description: "OK: Add course's lesson"
          content:
            application/json:
              schema:
                required:
                  - lesson_id
                properties:
                  lesson_id:
                    type: string
                    example: "1234"
  /programs/courses/{course_id}/chapters/{chapter_id}/lessons/{lesson_id}:
    parameters:
      - $ref: "#/components/parameters/courseID"
      - $ref: "#/components/parameters/chapterID"
      - $ref: "#/components/parameters/lessonID"
    get:
      tags:
        - program
      summary: Get a course's lesson.
      description: |
        For retrieving a course's lesson.
      operationId: getCourseLesson
      responses:
        "200":
          description: "OK: Get a course's lesson"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/lesson"
    patch:
      tags:
        - program
      summary: Edit specific lesson.
      description: |
        For editing a lesson.
      operationId: patchLesson
      requestBody:
        description: Lesson's fields to edit
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "first lesson"
                src:
                  type: string
                  example: "https://example-video.mp4"
                lesson_length:
                  type: integer
                  example: 12000000
      responses:
        "200":
          $ref: "#/components/responses/OK"
    delete:
      tags:
        - program
      summary: Delete a specific lesson.
      description: |
        For removing a lesson.
      operationId: deleteLesson
      responses:
        "200":
          $ref: "#/components/responses/OK"
  /programs/courses/{course_id}/announcements:
    parameters:
      - $ref: "#/components/parameters/courseID"
    get:
      tags:
        - program
      summary: List course's announcements.
      description: |
        For listing course's announcements.
      operationId: listCourseAnnoucements
      responses:
        "200":
          description: "OK: List course's announcements"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/announcements"
    post:
      tags:
        - program
      summary: Add course's announcement.
      description: |
        For adding a course's announcement.
      operationId: postCourseAnnouncement
      requestBody:
        description: Announcement to add to course.
        required: true
        content:
          application/json:
            schema:
              required:
                - type
              properties:
                announcement_id:
                  type: string
                  example: "1234"
                name:
                  type: string
                  example: "Announcement a"
                text:
                  type: string
                  example: "hello students`"
                attachments:
                  type: array
                  items:
                    type: object
                    properties:
                      src:
                        type: string
                        example: "https://example-img.png"
      responses:
        "200":
          description: "OK: Add course's announcement"
          content:
            application/json:
              schema:
                required:
                  - announcement_id
                properties:
                  announcement_id:
                    type: string
                    example: "1234"
  /programs/courses/{course_id}/announcements/{announcement_id}:
    parameters:
      - $ref: "#/components/parameters/courseID"
      - $ref: "#/components/parameters/announcementID"
    get:
      tags:
        - program
      summary: Get a course's announcement.
      description: |
        For retrieving a course's announcement.
      operationId: getCourseAnnoucement
      responses:
        "200":
          description: "OK: List a course's lesson"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/announcement"
    patch:
      tags:
        - program
      summary: Edit specific announcement.
      description: |
        For editing a announcement.
      operationId: patchAnnoucement
      requestBody:
        description: Announcement's fields to edit
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "New name"
                text:
                  type: string
                  example: "hello students"
                attachments:
                  type: array
                  items:
                    type: object
                    properties:
                      op:
                        type: string
                        example: "add | delete | edit"
                      old_src:
                        type: string
                        example: "https://example-img-old.png"
                      new_src:
                        type: string
                        example: "https://example-img.png"
      responses:
        "200":
          $ref: "#/components/responses/OK"
    delete:
      tags:
        - program
      summary: Delete a specific announcement.
      description: |
        For removing an announcement.
      operationId: deleteAnnouncement
      responses:
        "200":
          $ref: "#/components/responses/OK"

  /quizzes:
    post:
      tags:
        - quiz
      summary: Add specific quiz.
      description: |
        For inserting quiz.
      operationId: postQuiz
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "quiz name"
                description:
                  type: string
                  example: "quiz description"
                time_limit:
                  type: integer
                  example: 12313
                quiz_pic:
                  type: string
                  example: "https://example-pic.png"
                problems:
                  type: array
                  items:
                    type: object
                    properties:
                      problem_num:
                        type: integer
                        example: 1
                      question:
                        type: string
                        example: "When should you name are?"
                      multiple_correct_answers:
                        type: boolean
                        example: false
                      explanation:
                        type: string
                        example: "You are wrong!!!"
                      choice:
                        type: object
                        properties:
                          choice_a:
                            type: string
                            example: "a"
                          choice_b:
                            type: string
                            example: "b"
                          choice_c:
                            type: string
                            example: "c"
                          choice_d:
                            type: string
                            example: "d"
                          choice_e:
                            type: string
                            example: "e"
                          choice_f:
                            type: string
                            example: "f"
                      correct_answer:
                        type: object
                        properties:
                          answer_a:
                            type: boolean
                            example: true
                          answer_b:
                            type: boolean
                            example: false
                          answer_c:
                            type: boolean
                            example: false
                          answer_d:
                            type: boolean
                            example: false
                          answer_e:
                            type: boolean
                            example: false
                          answer_f:
                            type: boolean
                            example: false
      responses:
        "200":
          description: "OK: post quiz"
          content:
            application/json:
              schema:
                type: object
                properties:
                  quiz_id:
                    type: string
                    example: "2134"

  /quizzes/{quiz_id}:
    parameters:
      - $ref: "#/components/parameters/quizID"
    get:
      tags:
        - quiz
      summary: Get specific quiz.
      description: |
        For retrieving quiz.
      operationId: getQuiz
      responses:
        "200":
          description: "OK: Get quiz."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/quiz"

  /quizzes/{quiz_id}/result:
    parameters:
      - in: path
        name: quiz_id
        description: uniquely identify quiz.
        schema:
          type: string
          example: "1234"
        required: true
      - in: query
        name: student_id
        schema:
          type: string
          example: "1234"
        required: true
    get:
      tags:
        - quiz
      summary: Get specific user's quiz result.
      description: |
        For retrieving user quiz result.
      operationId: getQuizResult
      responses:
        "200":
          description: "OK: Get quiz result."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/quiz_result"
    patch:
      tags:
        - quiz
      summary: Patch specific quiz and submit answer.
      description: |
        For submitting student's quiz answers.
      operationId: patchQuiz
      requestBody:
        description: Student's quiz answers
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "started | finish"
                answers:
                  type: array
                  items:
                    type: object
                    properties:
                      problem_num:
                        type: integer
                        example: 1
                      answer:
                        $ref: "#/components/schemas/quiz_answer"
      responses:
        "200":
          description: "OK: Patch quiz result."
          content:
            application/json:
              schema:
                type: object
                properties:
                  answer_responses:
                    $ref: "#/components/schemas/quiz_answer_responses"

  /transactions/course/purchase:
    post:
      tags:
        - transaction
      summary: Make purchase transaction
      description: |
        Make purchase transaction
      operationId: postCoursePurchase
      requestBody:
        description: Course to purchase
        content:
          application/json:
            schema:
              type: object
              properties:
                student_id:
                  type: string
                  example: "1234"
                payment_method_id:
                  type: string
                  example: "1234"
      responses:
        "200":
          description: "OK: Make purchases."
          content:
            application/json:
              schema:
                type: object
                properties:
                  transaction_id:
                    type: string
                    example: "1234"

components:
  responses:
    OK:
      description: Server return 200 OK response.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseScheme"
          example:
            code: 200
            message: "OK"

    InternalServerError:
      description: Server encounter unexpected errors.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseScheme"
          example:
            code: 500
            message: "Internal Server Error"
    Unauthorized:
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseScheme"
          example:
            code: 401
            message: "Unauthorized"
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/responseScheme"
          example:
            code: 404
            message: "Not Found"

  # SCHEMAS
  schemas:
    responseScheme:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: number
          example: 400
        message:
          type: string
          example: "Internal Server Error"

    # USER SCHEMAS
    userCourse:
      type: object
      required:
        - course_id
        - name
      properties:
        course_id:
          type: string
          example: "1234"
        name:
          type: string
          example: "Advanced redstone weaponry"
    userClass:
      type: object
      required:
        - class_id
        - name
      properties:
        class_id:
          type: string
          example: "1234"
        name:
          type: string
          example: "Basic dropper mechanic"
    userConfig:
      type: object
      required:
        - theme
      properties:
        theme:
          type: string
          example: "light"
    userPaymentMethod:
      type: object
      required:
        - payment_method_id
        - name
        - type
        - card_number
        - cvc
        - expiration_date
        - holder_fullname
      properties:
        payment_method_id:
          type: string
          example: "1234"
        name:
          type: string
          example: "my-kbank-debit"
        type:
          type: string
          example: "kbank_debit"
        card_number:
          type: string
          example: "1231"
        cvc:
          type: string
          example: "12332"
        expiration_date:
          type: string
          example: "08/25"
        holder_fullname:
          type: string
          example: "foo bar"

    student:
      type: object
      required:
        - student_id
        - username
        - email
        - fullname
        - profile_pic
      properties:
        student_id:
          type: string
          example: "123456789"
        uid:
          type: string
          example: "133123123"
        username:
          type: string
          example: "foo-bar"
        email:
          type: string
          example: "example@example.com"
        fullname:
          type: string
          example: "foo bar"
        profile_pic:
          type: string
          example: "https://example/pic.png"
    studentCourses:
      type: object
      required:
        - course_id
        - name
        - teacher
        - progress
        - rating
      properties:
        courses:
          type: array
          items:
            properties:
              course_id:
                type: string
                example: "1234"
              course_pic:
                type: string
                example: "https://example-pic.com"
              name:
                type: string
                example: "course foo"
              teacher:
                type: object
                properties:
                  teacher_id:
                    type: string
                    example: "12345"
                  teacher_name:
                    type: string
                    example: "Mister teacher"
                  profile_pic:
                    type: string
                    example: "https://profile-pic.png"
              progress:
                type: number
                example: 100
              rating:
                type: number
                example: 20.2
    studentCourse:
      type: object
      required:
        - name
        - teacher
        - chapters
        - announcements
      properties:
        name:
          type: string
          example: "course foo"
        course_pic:
          type: string
          example: "https://example-pic.com"
        teacher:
          type: object
          properties:
            teacher_id:
              type: string
              example: "12345"
            teacher_name:
              type: string
              example: "Mister teacher"
            profile_pic:
              type: string
              example: "https://profile-pic.png"
        chapters:
          type: array
          items:
            properties:
              chapter_num:
                type: integer
                example: 0
              chapter_id:
                type: string
                example: "1234"
              name:
                type: string
                example: "chapter a"
        announcements:
          $ref: "#/components/schemas/announcements"
    studentClasses:
      type: array
      items:
        type: object
        properties:
          class_id:
            type: string
          name:
            type: string
          class_pic:
            type: string
            example: "https://example-pic.com"
          status:
            type: string
            example: "finished | not started | started"
          progress:
            type: number
            example: 100
          class_ended_date:
            type: integer
            example: 12391
          teacher:
            type: object
            properties:
              teacher_id:
                type: string
                example: "12345"
              teacher_name:
                type: string
                example: "Mister teacher"
              profile_pic:
                type: string
                example: "https://profile-pic.png"
    studentClass:
      type: object
      required:
        - name
        - status
        - class_ended_date
        - teacher
      properties:
        name:
          type: string
          example: "course foo"
        class_pic:
          type: string
          example: "https://example-pic.com"
        status:
          type: string
          example: "finished | not started | started"
        class_ended_date:
          type: integer
          example: 12391
        teacher:
          type: object
          properties:
            teacher_id:
              type: string
              example: "12345"
            teacher_name:
              type: string
              example: "Mister teacher"
            profile_pic:
              type: string
              example: "https://profile-pic.png"
        # TODO: add threads
    studentAssignment:
      type: object
      properties:
        assignments:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "assignment_name"
              class_info:
                type: object
                properties:
                  class_id:
                    type: string
                    example: "1234"
                  class_name:
                    type: string
                    example: "class_name"
              group_name:
                type: string
                example: "group_name"
              status:
                type: string
                example: "open | closed"
              submission:
                type: object
                properties:
                  submission_status:
                    type: string
                    example: "check | uncheck | unsubmit"
                  submission_date:
                    type: integer
                    example: 123123

    studentCourseProgress:
      type: object
      required:
        - progress
        - lessons
      properties:
        progress:
          type: number
          example: 20
        lessons:
          type: array
          items:
            type: object
            properties:
              lesson_id:
                type: string
                example: "1234"
              chapter_id:
                type: string
                example: "1234"
              finished:
                type: boolean
                example: true
              lesson_completed:
                type: number
                example: 50.2

    studentClassProgress:
      type: object
      required:
        - progress
        - lessons
      properties:
        progress:
          type: number
          example: 20
        # TODO: Add quiz progresses

    studentAchievement:
      type: object
      required:
        - achievement_id
        - name
        - description
        - achievement_pic
      properties:
        achievement_id:
          type: string
          example: "1234"
        name:
          type: string
          example: "Classes Collector"
        description:
          type: string
          example: "Own 10 different classes."
        achievement_pic:
          type: string
          example: "https://example/image.png"
    studentWishlistItem:
      type: object
      minItems: 4
      maxItems: 4
      required:
        - name
        - type
        - price
      properties:
        wishlist_item_id:
          type: string
          example: "1234"
        name:
          type: string
          example: "discreet math"
        type:
          type: string
          example: "class"
        class_id:
          type: string
          example: "123"
        course_id:
          type: string
          example: "123"
        price:
          type: number
          example: 1200.2
    studentPurchasesHistoryItem:
      type: object
      properties:
        type:
          type: string
          example: "class"
        class_id:
          type: string
          example: "1234"
        course_id:
          type: string
          example: "1234"
        price:
          type: number
          example: 1200
        name:
          type: string
          example: "Intro to physics"
    studentBasketItem:
      type: object
      required:
        - basket_item_id
        - name
        - type
        - teacher
        - price
        - program_id
      properties:
        basket_item_id:
          type: string
          example: "1234"
        type:
          type: string
          example: "class"
        program_id:
          type: string
          example: "1234"
        name:
          type: string
          example: "discreet math"
        teacher:
          type: object
          properties:
            teacher_name:
              type: string
              example: "Brown Sugar"
            teacher_id:
              type: string
              example: "1234"
        program_pic:
          type: string
          example: "https://local-picture.com"
        rating:
          type: number
          example: 20.2
        review_count:
          type: integer
          example: 30
        total_video_length:
          type: integer
          example: 123123
        difficulty_level:
          type: string
          example: "hard"
        price:
          type: number
          example: 1200.2

    teacher:
      type: object
      required:
        - teacher_id
        - username
        - email
        - fullname
        - profile_pic
      properties:
        uid:
          type: string
          example: "123132213"
        teacher_id:
          type: string
          example: "123456789"
        username:
          type: string
          example: "foo-bar"
        email:
          type: string
          example: "example@example.com"
        fullname:
          type: string
          example: "foo bar"
        profile_pic:
          type: string
          example: "https://example/pic.png"

    teacherCourses:
      properties:
        courses:
          type: array
          items:
            properties:
              course_id:
                type: string
                example: "1234"
              course_pic:
                type: string
                example: "https://example-pic.com"
              name:
                type: string
                example: "course foo"
              rating:
                type: number
                example: 20.2
              student_count:
                type: integer
                example: 300

    teacherClasses:
      properties:
        classes:
          type: array
          items:
            properties:
              class_id:
                type: string
                example: "1234"
              name:
                type: string
                example: "basic class"
              class_pic:
                type: string
                example: "https://example-pic.com"
              status:
                type: string
                example: "finished | not started | started"
              registration_ended_date:
                type: integer
                example: 123123
              class_ended_date:
                type: integer
                example: 12391
              student_count:
                type: integer
                example: 10000
              max_student:
                type: integer
                example: 10000

    # PROGRAMS SCHEMAS

    tag:
      type: object
      properties:
        tag_id:
          type: string
          example: "1234"
        tag_name:
          type: string
          example: "python"
    programs:
      type: object
      description: Multiple programs info.
      properties:
        programs:
          type: array
          items:
            type: object
            properties:
              course_id:
                type: string
                example: "123456789"
              class_id:
                type: string
                example: "123456789"
              type:
                type: string
                example: "course"
              name:
                type: string
                example: "basic course"
    classes:
      type: object
      description: Multiple classes info.
      properties:
        classes:
          type: array
          items:
            type: object
            properties:
              class_id:
                type: string
                example: "1234"
              name:
                type: string
                example: "basic class"
              class_pic:
                type: string
                example: "https://example-pic.com"
              teacher:
                type: object
                properties:
                  teacher_id:
                    type: string
                    example: "12345"
                  teacher_name:
                    type: string
                    example: "Mister B"
                  profile_pic:
                    type: string
                    example: "https://profile-pic.png"
              status:
                type: string
                example: "finished | not started | started"
              tags:
                type: array
                items:
                  type: object
                  properties:
                    tag_id:
                      type: string
                      example: "1234"
                    tag_name:
                      type: string
                      example: "Neural Network"
              registration_ended_date:
                type: integer
                example: 123123
              open_date:
                type: integer
                example: 123123
              class_ended_date:
                type: integer
                example: 12391
              price:
                type: number
                example: 3.5

    class:
      type: object
      description: Specific class info.
      properties:
        class_id:
          type: string
          example: "1234"
        name:
          type: string
          example: "basic class"
        class_pic:
          type: string
          example: "https://example-pic.com"
        teacher:
          type: object
          properties:
            teacher_id:
              type: string
              example: "12345"
            teacher_name:
              type: string
              example: "Mister B"
            profile_pic:
              type: string
              example: "https://profile-pic.png"
        description:
          type: string
          example: "This class teach .."
        tags:
          type: array
          items:
            type: object
            properties:
              tag_id:
                type: string
                example: "1234"
              tag_name:
                type: string
                example: "Neural Network"
        status:
          type: string
          example: "finished | not started | started"
        schedules:
          type: array
          items:
            type: object
            properties:
              start:
                type: integer
                example: "12312112323"
              end:
                type: integer
                example: "1231232131"
        registration_ended_date:
          type: integer
          example: 123123
        open_date:
          type: integer
          example: 123123
        class_ended_date:
          type: integer
          example: 12391
        price:
          type: number
          example: 3.5
        class_objective:
          type: array
          items:
            type: string
            example: "Objective a"
        class_requirement:
          type: string
          example: "Required adobe photoshop"
        difficulty_level:
          type: string
          example: "very hard"
        chapter_count:
          type: integer
          example: 15
        meeting_count: # TODO: Meeting count required?
          type: integer
          example: 15
        student_count:
          type: integer
          example: 10000
        max_student:
          type: integer
          example: 10000
        assignment_count:
          type: integer
          example: 20
    threads:
      type: object
      description: Multiple class's threads
      properties:
        threads:
          type: array
          items:
            type: object
            properties:
              thread_id:
                type: string
                example: "1234"
              name:
                type: string
                example: "Thread foo"
              teacher:
                type: object
                properties:
                  teacher_id:
                    type: string
                    example: "12345"
                  teacher_name:
                    type: string
                    example: "Mister foo"
                  profile_pic:
                    type: string
                    example: "https://profile-pic.png"
              last_edit:
                type: integer
                example: 1213123
    thread:
      type: object
      description: Single class's thread
      properties:
        name:
          type: string
          example: "Thread foo"
        teacher:
          type: object
          properties:
            teacher_id:
              type: string
              example: "12345"
            teacher_name:
              type: string
              example: "Mister foo"
            profile_pic:
              type: string
              example: "https://profile-pic.png"
        last_edit:
          type: integer
          example: 1213123
        text:
          type: string
          example: "Text Content"
        attachments:
          type: array
          items:
            type: object
            properties:
              attachment_type:
                type: string
                example: "image"
              src:
                type: string
                example: "https://example-img.png"

                # TODO: add comments?

    assignments:
      type: object
      description: Multiple course's assignments
      properties:
        assignments:
          type: array
          items:
            type: object
            properties:
              assignment_id:
                type: string
                example: "1234"
              name:
                type: string
                example: "Pre-test homework"
              group_name:
                type: string
                example: "First group"
              last_edit:
                type: integer
                example: 1231131
              due_date:
                type: integer
                example: 1231231231
              status:
                type: string
                example: "open | closed"
              max_score:
                type: number
                example: 100
              text:
                type: string
                example: "You must do this homework!!"
    assignment:
      type: object
      properties:
        name:
          type: string
          example: "Pre-test homework"
        group_name:
          type: string
          example: "First group"
        last_edit:
          type: integer
          example: 1231131
        due_date:
          type: integer
          example: 1231231231
        status:
          type: string
          example: "open | closed"
        max_score:
          type: number
          example: 100
        text:
          type: string
          example: "You must do this homework!!"
        attachments:
          type: array
          items:
            type: object
            properties:
              attachment_type:
                type: string
                example: "image"
              src:
                type: string
                example: "https://example-img.png"
        # TODO: Add comments
    #
    submissions:
      type: object
      properties:
        submissions:
          type: array
          items:
            type: object
            properties:
              status:
                type: string
                example: "check | uncheck | unsubmit"
              score:
                type: integer
                example: 100
              student:
                type: object
                properties:
                  student_id:
                    type: string
                    example: "1234"
                  student_name:
                    type: string
                    example: "Paff"
                  profile_pic:
                    type: string
                    example: "https://picture.png"

    submission:
      type: object
      properties:
        student:
          type: object
          properties:
            student_id:
              type: string
              example: "1234"
            student_name:
              type: string
              example: "Paff"
            profile_pic:
              type: string
              example: "https://picture.png"
        score:
          type: integer
          example: 100
        status:
          type: string
          example: "check | uncheck | unsubmit"
        attachments:
          type: array
          items:
            type: object
            properties:
              attachment_type:
                type: string
                example: "image"
              src:
                type: string
                example: "https://example-img.png"

    courses:
      type: object
      description: Multiple courses info.
      properties:
        courses:
          type: array
          items:
            type: object
            properties:
              course_id:
                type: string
                example: "123456789"
              name:
                type: string
                example: "basic course"
              teacher:
                type: object
                properties:
                  teacher_id:
                    type: string
                    example: "12345"
                  teacher_name:
                    type: string
                    example: "Mister foo"
                  profile_pic:
                    type: string
                    example: "https://profile-pic.png"
              tags:
                type: array
                items:
                  type: object
                  properties:
                    tag_id:
                      type: string
                      example: "1234"
                    tag_name:
                      type: string
                      example: "Neural Network"
              rating:
                type: number
                example: 3.5
              review_count:
                type: integer
                example: 300
              price:
                type: number
                example: 3.5
              course_pic:
                type: string
                example: "https://example-pic.com"
    course:
      type: object
      description: A course info
      properties:
        course_id:
          type: string
          example: "1235567"
        name:
          type: string
          example: "basic redstone course"
        course_pic:
          type: string
          example: "https://example-pic.com"
        tags:
          type: array
          items:
            type: object
            properties:
              tag_id:
                type: string
                example: "1234"
              tag_name:
                type: string
                example: "Neural Network"
        description:
          type: string
          example: "Redstone course"
        course_objective:
          type: array
          items:
            type: string
            example: "Objective a"
        course_requirement:
          type: string
          example: "Required adobe photoshop"
        difficulty_level:
          type: string
          example: "very hard"
        rating:
          type: number
          example: 3.5
        review_count:
          type: integer
          example: 300
        student_count:
          type: integer
          example: 300
        teacher:
          type: object
          properties:
            teacher_id:
              type: string
              example: "12345"
            teacher_name:
              type: string
              example: "Mister teacher"
            profile_pic:
              type: string
              example: "https://profile-pic.png"
        price:
          type: number
          example: 100
        total_video_length:
          type: integer
          example: 10000000
        video_count:
          type: integer
          example: 10
        chapter_count:
          type: integer
          example: 10
        quiz_count:
          type: integer
          example: 10
        file_count:
          type: integer
          example: 10
    course_students:
      type: array
      items:
        type: object
        properties:
          student_id:
            type: string
            example: "1234567"
          name:
            type: string
            example: "paff"
          profile_pic:
            type: string
            example: "https://example-pic.png"
    chapters:
      type: array
      items:
        type: object
        properties:
          chapter_id:
            type: string
            example: "1235"
          chapter_num:
            type: integer
            example: 1
          name:
            type: string
            example: "first chapter"
          lesson_count:
            type: integer
            example: 10
          chapter_length:
            type: integer
            example: 10001
    chapter:
      type: object
      properties:
        chapter_id:
          type: string
          example: "1235"
        chapter_num:
          type: integer
          example: 1
        name:
          type: string
          example: "first chapter"
        description:
          type: string
          example: "A good chapter"
    lessons:
      type: array
      items:
        type: object
        properties:
          lesson_id:
            type: string
            example: "1235"
          lesson_num:
            type: integer
            example: 1
          name:
            type: string
            example: "first lesson"
          lesson_type:
            type: string
            example: "video | file | doc | quiz"
          lesson_length:
            type: integer
            example: 12000000
    lesson:
      type: object
      properties:
        lesson_id:
          type: string
          example: "1235"
        lesson_num:
          type: integer
          example: 1
        name:
          type: string
          example: "first lesson"
        lesson_type:
          type: string
          example: "video | file | doc | quiz"
        lesson_length:
          type: integer
          example: 12000000
        src:
          type: string
          example: "https://example-video.mp4"
    announcements:
      type: array
      items:
        type: object
        properties:
          announcement_id:
            type: string
            example: "1234"
          name:
            type: string
            example: "Announcement foo"
          last_edit:
            type: integer
            example: 1233323
    announcement:
      type: object
      properties:
        announcement_id:
          type: string
          example: "1234"
        teacher:
          type: object
          properties:
            teacher_id:
              type: string
              example: "12345"
            teacher_name:
              type: string
              example: "Mister teacher"
            profile_pic:
              type: string
              example: "https://profile-pic.png"
        name:
          type: string
          example: "Annoucement a"
        last_edit:
          type: integer
          example: 1233323
        text:
          type: string
          example: "hello students"
        attachments:
          type: array
          items:
            type: object
            properties:
              attachment_type:
                type: string
                example: "image"
              src:
                type: string
                example: "https://example-img.png"
    quiz:
      type: object
      properties:
        name:
          type: string
          example: Fan pun tae Gundam
        description:
          type: string
          example: description
        time_limit:
          type: integer
          example: 1000
        quiz_pic:
          type: string
          example: "https://example-pic.jpeg"
        problems:
          type: array
          items:
            $ref: "#/components/schemas/problem"

    problem:
      type: object
      required:
        - problem_num
        - question
        - multiple_correct_answers
        - answers
      properties:
        problem_num:
          type: integer
          example: 1
        question:
          type: string
          example: "What is Nu Gundam Machine Code?"
        multiple_correct_answers:
          type: boolean
          example: false
        choice:
          $ref: "#/components/schemas/choice"

    choice:
      type: object
      properties:
        choice_a:
          type: string
          example: "RX-78"
        choice_b:
          type: string
          example: "RX-93"
        choice_c:
          type: string
          example: "MSN-04"
        choice_d:
          type: string
          example: "MSN-01"
        choice_e:
          type: string
          example: "MSN-01"
        choice_f:
          type: string
          example: "MSN-01"

    quiz_answer:
      type: object
      properties:
        answer_a:
          type: boolean
          example: false
        answer_b:
          type: boolean
          example: true
        answer_c:
          type: boolean
          example: false
        answer_d:
          type: boolean
          example: false
        answer_e:
          type: boolean
          example: false
        answer_f:
          type: boolean
          example: false

    quiz_answer_responses:
      type: array
      items:
        type: object
        properties:
          problem_num:
            type: integer
            example: 1
          correct_answer:
            $ref: "#/components/schemas/quiz_answer"
          explanation:
            type: string
            example: "You are wrong because you suck!!!"

    quiz_result:
      type: object
      properties:
        status:
          type: string
          example: "not started | started | finish"
        score:
          type: integer
          example: 6
        problems:
          type: array
          items:
            type: object
            properties:
              problem_num:
                type: integer
                example: 1
              answer:
                $ref: "#/components/schemas/quiz_answer"
              correct_answer:
                $ref: "#/components/schemas/quiz_answer"
              explanation:
                type: string
                example: "You are wrong!!!"

  # PARAMETERS
  parameters:
    studentID:
      in: path
      name: student_id
      description: uniquely identify students.
      schema:
        type: string
      example: "1234"
      required: true
    teacherID:
      in: path
      name: teacher_id
      description: uniquely identify teachers.
      schema:
        type: string
      example: "1234"
      required: true
    wishlistItemID:
      in: path
      name: wishlist_item_id
      description: uniquely identify wishlist item.
      schema:
        type: string
      example: "1234"
      required: true
    paymentMethodID:
      in: path
      name: payment_method_id
      description: uniquely identify user's payment method.
      schema:
        type: string
      example: "1234"
      required: true
    basketItemID:
      in: path
      name: basket_item_id
      description: uniquely identify student's basket item.
      schema:
        type: string
      example: "1234"
      required: true
    courseID:
      in: path
      name: course_id
      description: uniquely identify courses.
      schema:
        type: string
        example: "1234"
      required: true
    classID:
      in: path
      name: class_id
      description: uniquely identify classes.
      schema:
        type: string
        example: "1234"
      required: true
    threadID:
      in: path
      name: thread_id
      description: uniquely identify class's thread.
      schema:
        type: string
        example: "1234"
      required: true
    assignmentID:
      in: path
      name: assignment_id
      description: uniquely identify class's assignment.
      schema:
        type: string
        example: "1234"
      required: true
    chapterID:
      in: path
      name: chapter_id
      description: uniquely identify chapters.
      schema:
        type: string
        example: "1234"
      required: true
    lessonID:
      in: path
      name: lesson_id
      description: uniquely identify lessons.
      schema:
        type: string
        example: "1234"
      required: true
    announcementID:
      in: path
      name: announcement_id
      description: uniquely identify announcements.
      schema:
        type: string
        example: "1234"
      required: true
    quizID:
      in: path
      name: quiz_id
      description: uniquely identify quiz.
      schema:
        type: string
        example: "1234"
      required: true
